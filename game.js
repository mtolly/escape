// Generated by CoffeeScript 1.4.0
(function() {
  var Circle, Player, Point, Rect, Wall, bodies, canvas, ctx, floors, key_down, key_left, key_right, key_up, walls;

  canvas = null;

  ctx = null;

  walls = [];

  floors = [];

  bodies = [];

  key_down = false;

  key_up = false;

  key_left = false;

  key_right = false;

  Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.distance_to = function(p) {
      return Math.pow(Math.pow(this.x - p.x, 2) + Math.pow(this.y - p.y, 2), 0.5);
    };

    return Point;

  })();

  Rect = (function() {

    function Rect(top_left, width, height) {
      this.top_left = top_left;
      this.width = width;
      this.height = height;
    }

    Rect.prototype.top_y = function() {
      return this.top_left.y;
    };

    Rect.prototype.bottom_y = function() {
      return this.top_y() + this.height;
    };

    Rect.prototype.left_x = function() {
      return this.top_left.x;
    };

    Rect.prototype.right_x = function() {
      return this.left_x() + this.width;
    };

    Rect.prototype.includes_point = function(p) {
      var _ref, _ref1;
      return ((this.left_x() <= (_ref = p.x) && _ref <= this.right_x())) && ((this.top_y() <= (_ref1 = p.y) && _ref1 <= this.bottom_y()));
    };

    return Rect;

  })();

  Circle = (function() {

    function Circle(center, radius) {
      this.center = center;
      this.radius = radius;
    }

    Circle.prototype.includes_point = function(p) {
      return this.center.distance_to(p) <= this.radius;
    };

    return Circle;

  })();

  Wall = (function() {

    function Wall(rect) {
      this.rect = rect;
    }

    Wall.prototype.push = function(shape, dir) {
      return shape;
    };

    Wall.prototype.draw = function() {
      ctx.fillStyle = 'black';
      return ctx.fillRect(this.rect.left_x(), this.rect.top_y(), this.rect.width, this.rect.height);
    };

    return Wall;

  })();

  Player = (function() {

    function Player(circle) {
      this.circle = circle;
      this.angle = 1.5 * Math.PI;
      this.speed = 1;
    }

    Player.prototype.draw = function() {
      ctx.beginPath();
      ctx.arc(this.circle.center.x, this.circle.center.y, this.circle.radius, 0, 2 * Math.PI, false);
      ctx.fillStyle = 'red';
      return ctx.fill();
    };

    Player.prototype.update = function() {
      var move_down, move_left, move_right, move_up;
      move_down = true;
      move_up = false;
      move_left = false;
      return move_right = false;
    };

    return Player;

  })();

  $(document).ready(function() {
    var animloop;
    canvas = $('#canvas')[0];
    ctx = canvas.getContext('2d');
    window.requestAnimFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        return window.setTimeout(callback, 1000 / 60);
      };
    })();
    walls.push(new Wall(new Rect(new Point(10, 10), 30, 100)));
    bodies.push(new Player(new Circle(new Point(100, 200), 25)));
    return (animloop = function() {
      var body, floor, wall, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _results;
      requestAnimFrame(animloop);
      for (_i = 0, _len = bodies.length; _i < _len; _i++) {
        body = bodies[_i];
        body.update();
      }
      for (_j = 0, _len1 = floors.length; _j < _len1; _j++) {
        floor = floors[_j];
        floor.update();
      }
      ctx.fillStyle = 'white';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      for (_k = 0, _len2 = floors.length; _k < _len2; _k++) {
        floor = floors[_k];
        floor.draw();
      }
      for (_l = 0, _len3 = walls.length; _l < _len3; _l++) {
        wall = walls[_l];
        wall.draw();
      }
      _results = [];
      for (_m = 0, _len4 = bodies.length; _m < _len4; _m++) {
        body = bodies[_m];
        _results.push(body.draw());
      }
      return _results;
    })();
  });

}).call(this);
