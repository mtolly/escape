// Generated by CoffeeScript 1.8.0
(function() {
  var Bullet, Circle, Goal, Player, Point, Rect, Switch, SwitchWall, Turret, Wall, bodies, canvas, collides, ctx, endedAt, floors, key_down, key_left, key_right, key_up, mouse_down, mouse_x, mouse_y, shot, walls, won,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  canvas = null;

  ctx = null;

  walls = [];

  floors = [];

  bodies = [];

  key_down = false;

  key_up = false;

  key_left = false;

  key_right = false;

  mouse_down = false;

  mouse_x = 0;

  mouse_y = 0;

  shot = false;

  won = false;

  endedAt = null;

  Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.distance_to = function(p) {
      return Math.pow(Math.pow(this.x - p.x, 2) + Math.pow(this.y - p.y, 2), 0.5);
    };

    Point.prototype.change_x = function(dx) {
      return new Point(this.x + dx, this.y);
    };

    Point.prototype.change_y = function(dy) {
      return new Point(this.x, this.y + dy);
    };

    return Point;

  })();

  Rect = (function() {
    function Rect(top_left, width, height) {
      this.top_left = top_left;
      this.width = width;
      this.height = height;
    }

    Rect.prototype.top_y = function() {
      return this.top_left.y;
    };

    Rect.prototype.bottom_y = function() {
      return this.top_y() + this.height;
    };

    Rect.prototype.left_x = function() {
      return this.top_left.x;
    };

    Rect.prototype.right_x = function() {
      return this.left_x() + this.width;
    };

    Rect.prototype.includes_point = function(p) {
      var _ref, _ref1;
      return ((this.left_x() <= (_ref = p.x) && _ref <= this.right_x())) && ((this.top_y() <= (_ref1 = p.y) && _ref1 <= this.bottom_y()));
    };

    Rect.prototype.center = function() {
      return new Point(this.left_x() + 0.5 * this.width, this.top_y() + 0.5 * this.height);
    };

    Rect.prototype.bottom_left = function() {
      return new Point(this.left_x(), this.bottom_y());
    };

    Rect.prototype.top_right = function() {
      return new Point(this.right_x(), this.top_y());
    };

    Rect.prototype.bottom_right = function() {
      return new Point(this.right_x(), this.bottom_y());
    };

    Rect.prototype.change_x = function(dx) {
      return new Rect(this.top_left.change_x(dx), this.width, this.height);
    };

    Rect.prototype.change_y = function(dy) {
      return new Rect(this.top_left.change_y(dy), this.width, this.height);
    };

    Rect.prototype.draw = function(fill, stroke, stroke_width) {
      if (stroke == null) {
        stroke = null;
      }
      if (stroke_width == null) {
        stroke_width = 3;
      }
      ctx.fillStyle = fill;
      ctx.fillRect(this.left_x(), this.top_y(), this.width, this.height);
      if (stroke) {
        ctx.lineWidth = stroke_width;
        ctx.strokeStyle = stroke;
        return ctx.strokeRect(this.left_x(), this.top_y(), this.width, this.height);
      }
    };

    return Rect;

  })();

  Circle = (function() {
    function Circle(center, radius) {
      this.center = center;
      this.radius = radius;
    }

    Circle.prototype.includes_point = function(p) {
      return this.center.distance_to(p) <= this.radius;
    };

    Circle.prototype.change_x = function(dx) {
      return new Circle(this.center.change_x(dx), this.radius);
    };

    Circle.prototype.change_y = function(dy) {
      return new Circle(this.center.change_y(dy), this.radius);
    };

    Circle.prototype.draw = function(fill, stroke, stroke_width) {
      if (stroke == null) {
        stroke = null;
      }
      if (stroke_width == null) {
        stroke_width = 3;
      }
      ctx.beginPath();
      ctx.arc(this.center.x, this.center.y, this.radius, 0, 2 * Math.PI, false);
      ctx.fillStyle = fill;
      ctx.fill();
      if (stroke) {
        ctx.lineWidth = stroke_width;
        ctx.strokeStyle = stroke;
        ctx.stroke();
      }
      return ctx.closePath();
    };

    return Circle;

  })();

  collides = function(x, y) {
    var corner, _i, _j, _len, _len1, _ref, _ref1;
    if (x instanceof Rect) {
      if (y instanceof Rect) {
        _ref = [y.top_left, y.bottom_left(), y.top_right(), y.bottom_right()];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          corner = _ref[_i];
          if (x.includes_point(corner)) {
            return true;
          }
        }
        _ref1 = [x.top_left, x.bottom_left(), x.top_right(), x.bottom_right()];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          corner = _ref1[_j];
          if (y.includes_point(corner)) {
            return true;
          }
        }
        return false;
      } else if (y instanceof Circle) {
        return x.includes_point(y.center) || x.includes_point(y.center.change_x(y.radius)) || x.includes_point(y.center.change_x(-y.radius)) || x.includes_point(y.center.change_y(y.radius)) || x.includes_point(y.center.change_y(-y.radius)) || y.includes_point(x.top_left) || y.includes_point(x.bottom_left()) || y.includes_point(x.top_right()) || y.includes_point(x.bottom_right());
      }
    } else if (x instanceof Circle) {
      if (y instanceof Rect) {
        return collides(y, x);
      } else if (y instanceof Circle) {
        return x.center.distance_to(y.center) <= x.radius + y.radius;
      }
    }
  };

  Wall = (function() {
    function Wall(shape) {
      this.shape = shape;
    }

    Wall.prototype.push = function(shape, push_x, push_y) {
      while (collides(this.shape, shape)) {
        shape = shape.change_x(push_x).change_y(push_y);
      }
      return shape;
    };

    Wall.prototype.draw = function() {
      return this.shape.draw('black');
    };

    return Wall;

  })();

  SwitchWall = (function(_super) {
    __extends(SwitchWall, _super);

    function SwitchWall(shape, color) {
      this.shape = shape;
      this.color = color;
    }

    SwitchWall.prototype.open = function() {
      var floor, _i, _len;
      for (_i = 0, _len = floors.length; _i < _len; _i++) {
        floor = floors[_i];
        if (floor instanceof Switch) {
          if (floor.color === this.color && floor.pressed) {
            return true;
          }
        }
      }
      return false;
    };

    SwitchWall.prototype.push = function(shape, push_x, push_y) {
      if (this.open()) {
        return shape;
      } else {
        return SwitchWall.__super__.push.apply(this, arguments);
      }
    };

    SwitchWall.prototype.draw = function() {
      if (this.open()) {
        return;
      }
      return this.shape.draw(this.color);
    };

    return SwitchWall;

  })(Wall);

  Player = (function() {
    function Player(circle) {
      this.circle = circle;
      this.angle = 1.5 * Math.PI;
      this.speed = 6;
    }

    Player.prototype.draw = function() {
      return this.circle.draw('gray');
    };

    Player.prototype.update = function() {
      var dx, dy, mouse_angle, move_down, move_left, move_right, move_up, moving, push_x, push_y, wall, _i, _len;
      if (shot) {
        return false;
      }
      move_down = key_down;
      move_up = key_up;
      move_left = key_left;
      move_right = key_right;
      if (mouse_down) {
        mouse_angle = Math.atan2(mouse_y - this.circle.center.y, mouse_x - this.circle.center.x);
        if (mouse_angle < 0) {
          move_up || (move_up = true);
        } else if (mouse_angle > 0) {
          move_down || (move_down = true);
        }
        if (mouse_angle > 0.5 * Math.PI || mouse_angle < -0.5 * Math.PI) {
          move_left || (move_left = true);
        } else if ((-0.5 * Math.PI < mouse_angle && mouse_angle < 0.5 * Math.PI)) {
          move_right || (move_right = true);
        }
      }
      moving = true;
      if (move_down && move_up) {
        move_down = move_up = false;
      }
      if (move_left && move_right) {
        move_left = move_right = false;
      }
      this.angle = mouse_down ? mouse_angle : Math.PI * (move_down ? move_left ? 0.75 : move_right ? 0.25 : 0.5 : move_up ? move_left ? 1.25 : move_right ? 1.75 : 1.5 : move_left ? 1 : move_right ? 0 : (moving = false, this.angle));
      if (moving) {
        dx = this.speed * Math.cos(this.angle);
        dy = this.speed * Math.sin(this.angle);
        this.circle = this.circle.change_x(dx).change_y(dy);
        push_x = move_left ? 1 : move_right ? -1 : 0;
        push_y = move_up ? 1 : move_down ? -1 : 0;
        for (_i = 0, _len = walls.length; _i < _len; _i++) {
          wall = walls[_i];
          this.circle = wall.push(this.circle, push_x, push_y);
        }
      }
      return true;
    };

    return Player;

  })();

  Switch = (function() {
    function Switch(circle, color, pressed) {
      this.circle = circle;
      this.color = color;
      this.pressed = pressed != null ? pressed : false;
    }

    Switch.prototype.draw = function() {
      this.circle.draw(this.color, 'black', 2);
      if (this.pressed) {
        ctx.fillStyle = 'white';
        return ctx.fillRect(this.circle.center.x - 2, this.circle.center.y - 2, 4, 4);
      }
    };

    Switch.prototype.update = function() {
      var body, _i, _len;
      for (_i = 0, _len = bodies.length; _i < _len; _i++) {
        body = bodies[_i];
        if (body instanceof Player) {
          if (collides(this.circle, body.circle)) {
            this.pressed = true;
          }
        }
      }
      return true;
    };

    return Switch;

  })();

  Turret = (function() {
    function Turret(circle) {
      this.circle = circle;
      this.timer = 0;
      this.goal = 30;
    }

    Turret.prototype.draw = function() {
      return this.circle.draw('gray', 'black', this.timer / 3);
    };

    Turret.prototype.update = function() {
      if (this.timer >= this.goal) {
        this.timer = 0;
      } else {
        this.timer += 1;
      }
      return true;
    };

    Turret.prototype.spawn = function() {
      var angle, body, dx, dy, player, target, _i, _len;
      if (this.timer >= this.goal) {
        player = null;
        for (_i = 0, _len = bodies.length; _i < _len; _i++) {
          body = bodies[_i];
          if (body instanceof Player) {
            player = body;
            break;
          }
        }
        if (player) {
          target = player.circle.center;
          dx = target.x - this.circle.center.x;
          dy = target.y - this.circle.center.y;
          angle = Math.atan2(dy, dx);
          return [new Bullet(new Circle(this.circle.center, 5), angle)];
        }
      }
      return [];
    };

    return Turret;

  })();

  Bullet = (function() {
    function Bullet(shape, angle) {
      this.shape = shape;
      this.angle = angle;
      this.speed = 8;
    }

    Bullet.prototype.draw = function() {
      return this.shape.draw('magenta');
    };

    Bullet.prototype.update = function() {
      var body, dx, dy, wall, _i, _j, _len, _len1;
      dx = this.speed * Math.cos(this.angle);
      dy = this.speed * Math.sin(this.angle);
      this.shape = this.shape.change_x(dx).change_y(dy);
      for (_i = 0, _len = walls.length; _i < _len; _i++) {
        wall = walls[_i];
        if (collides(this.shape, wall.shape)) {
          return false;
        }
      }
      for (_j = 0, _len1 = bodies.length; _j < _len1; _j++) {
        body = bodies[_j];
        if (body instanceof Player) {
          if (collides(body.circle, this.shape)) {
            shot = true;
            if (endedAt == null) {
              endedAt = Date.now();
            }
            return false;
          }
        }
      }
      return true;
    };

    return Bullet;

  })();

  Goal = (function() {
    function Goal(circle) {
      this.circle = circle;
    }

    Goal.prototype.draw = function() {
      return this.circle.draw('orange');
    };

    Goal.prototype.update = function() {
      var body, _i, _len;
      for (_i = 0, _len = bodies.length; _i < _len; _i++) {
        body = bodies[_i];
        if (body instanceof Player) {
          if (collides(body.circle, this.circle)) {
            won = true;
            if (endedAt == null) {
              endedAt = Date.now();
            }
          }
        }
      }
      return true;
    };

    return Goal;

  })();

  $(document).ready(function() {
    var animloop, startTime;
    canvas = $('#canvas')[0];
    ctx = canvas.getContext('2d');
    $(document).keydown(function(evt) {
      switch (evt.which) {
        case 37:
          key_left = true;
          break;
        case 38:
          key_up = true;
          break;
        case 39:
          key_right = true;
          break;
        case 40:
          key_down = true;
          break;
        case 'A'.charCodeAt(0):
          key_left = true;
          break;
        case 'W'.charCodeAt(0):
          key_up = true;
          break;
        case 'D'.charCodeAt(0):
          key_right = true;
          break;
        case 'S'.charCodeAt(0):
          key_down = true;
      }
      return null;
    });
    $(document).keyup(function(evt) {
      switch (evt.which) {
        case 37:
          key_left = false;
          break;
        case 38:
          key_up = false;
          break;
        case 39:
          key_right = false;
          break;
        case 40:
          key_down = false;
          break;
        case 'A'.charCodeAt(0):
          key_left = false;
          break;
        case 'W'.charCodeAt(0):
          key_up = false;
          break;
        case 'D'.charCodeAt(0):
          key_right = false;
          break;
        case 'S'.charCodeAt(0):
          key_down = false;
      }
      return null;
    });
    $(document).mousemove(function(evt) {
      var rect;
      rect = canvas.getBoundingClientRect();
      mouse_x = evt.clientX - rect.left;
      mouse_y = evt.clientY - rect.top;
      return null;
    });
    $(document).mousedown(function(evt) {
      mouse_down = true;
      return null;
    });
    $(document).mouseup(function(evt) {
      mouse_down = false;
      return null;
    });
    window.requestAnimFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        return window.setTimeout(callback, 1000 / 60);
      };
    })();
    canvas.width = 820;
    canvas.height = 520;
    walls.push(new Wall(new Rect(new Point(0, 0), 20, canvas.height)));
    walls.push(new Wall(new Rect(new Point(0, 0), canvas.width, 20)));
    walls.push(new Wall(new Rect(new Point(canvas.width - 20, 0), 20, canvas.height)));
    walls.push(new Wall(new Rect(new Point(0, canvas.height - 20), canvas.width, 20)));
    walls.push(new Wall(new Rect(new Point(100, 0), 20, 200)));
    walls.push(new Wall(new Rect(new Point(100, 320), 20, 200)));
    bodies.push(new Player(new Circle(new Point(60, 60), 15)));
    floors.push(new Switch(new Circle(new Point(60, canvas.height - 60), 10), 'blue'));
    walls.push(new SwitchWall(new Rect(new Point(200, 20), 20, 80), 'lime'));
    walls.push(new Wall(new Rect(new Point(200, 100), 20, 100)));
    walls.push(new Wall(new Rect(new Point(200, 320), 20, 100)));
    walls.push(new SwitchWall(new Rect(new Point(200, 420), 20, 80), 'red'));
    walls.push(new Wall(new Rect(new Point(200, 100), 400, 20)));
    walls.push(new Wall(new Rect(new Point(200, 400), 400, 20)));
    walls.push(new Wall(new Rect(new Point(580, 100), 20, 320)));
    walls.push(new SwitchWall(new Rect(new Point(200, 200), 100, 20), 'blue'));
    walls.push(new SwitchWall(new Rect(new Point(200, 300), 100, 20), 'yellow'));
    walls.push(new Wall(new Rect(new Point(300, 200), 300, 20)));
    walls.push(new Wall(new Rect(new Point(300, 300), 400, 20)));
    walls.push(new Wall(new Rect(new Point(680, 420), 20, 80)));
    bodies.push(new Turret(new Circle(new Point(400, 260), 7)));
    floors.push(new Switch(new Circle(new Point(530, 160), 10), 'lime'));
    floors.push(new Switch(new Circle(new Point(530, 360), 10), 'red'));
    floors.push(new Goal(new Circle(new Point(640, 460), 15)));
    floors.push(new Switch(new Circle(new Point(760, 60), 10), 'yellow'));
    bodies.push(new Turret(new Circle(new Point(760, 310), 7)));
    startTime = Date.now();
    (animloop = function() {
      var body, clockSeconds, floor, minutes, new_bodies, new_floors, seconds, timeDisplay, wall, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m;
      requestAnimFrame(animloop);
      new_bodies = [];
      for (_i = 0, _len = bodies.length; _i < _len; _i++) {
        body = bodies[_i];
        if (body.update()) {
          new_bodies.push(body);
        }
        if (body.spawn) {
          new_bodies = new_bodies.concat(body.spawn());
        }
      }
      bodies = new_bodies;
      new_floors = [];
      for (_j = 0, _len1 = floors.length; _j < _len1; _j++) {
        floor = floors[_j];
        if (floor.update()) {
          new_floors.push(floor);
        }
      }
      floors = new_floors;
      ctx.fillStyle = shot ? 'maroon' : won ? 'green' : 'white';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      for (_k = 0, _len2 = floors.length; _k < _len2; _k++) {
        floor = floors[_k];
        floor.draw();
      }
      for (_l = 0, _len3 = bodies.length; _l < _len3; _l++) {
        body = bodies[_l];
        body.draw();
      }
      for (_m = 0, _len4 = walls.length; _m < _len4; _m++) {
        wall = walls[_m];
        wall.draw();
      }
      clockSeconds = ((endedAt != null ? endedAt : Date.now()) - startTime) / 1000;
      minutes = Math.floor(clockSeconds / 60);
      seconds = clockSeconds - minutes * 60;
      timeDisplay = '';
      if (minutes < 10) {
        timeDisplay += '0';
      }
      timeDisplay += minutes;
      timeDisplay += ':';
      if (seconds < 10) {
        timeDisplay += '0';
      }
      timeDisplay += seconds.toFixed(3);
      ctx.fillStyle = 'white';
      ctx.font = '15px monospace';
      ctx.fillText(timeDisplay, 3, 15);
      return null;
    })();
    return null;
  });

}).call(this);
